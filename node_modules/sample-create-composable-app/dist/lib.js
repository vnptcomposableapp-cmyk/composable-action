"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setMetadata = void 0;
exports.create = create;
exports.checkValidName = checkValidName;
exports.checkProjectInput = checkProjectInput;
exports.extractProjectId = extractProjectId;
exports.banner = banner;
const sample_composable_cli_1 = require("sample-composable-cli");
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("upath"));
const validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
const file_utils_1 = require("./utils/file-utils");
const npm_utils_1 = require("./utils/npm-utils");
function getCPAStrategy(platform) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (platform) {
            case 'nextjs':
                return (yield Promise.resolve().then(() => __importStar(require('./nextjs/nextjs')))).nextjsStrategy;
            case 'gatsby':
                return (yield Promise.resolve().then(() => __importStar(require('./gatsby/gatsby')))).gatsbyStrategy;
            case 'react':
                return (yield Promise.resolve().then(() => __importStar(require('./react/react')))).reactStrategy;
            case 'tanstack':
                return (yield Promise.resolve().then(() => __importStar(require('./tanstack/tanstack')))).tanstackStrategy;
        }
    });
}
function create(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { resolvedProjectPath, projectId, platform, platformOptions, scheme, jsOrTs, template, } = args;
        let { projectApiToken } = args;
        console.log('Let\'s get started! Here\'s what we\'ll do: ');
        console.log('1. Authenticate with Plasmic');
        console.log('2. Create a React/Next/Gatsby repo');
        console.log('3. Integrate with Plasmic');
        // Authenticate with Plasmic
        banner('AUTHENTICATING WITH PLASMIC');
        if (projectApiToken) {
            console.log('Skipping auth; using the given project API token.');
        }
        else {
            const promise = (0, sample_composable_cli_1.auth)({
                host: 'https://schismless-ehtel-overaggressively.ngrok-free.dev',
                check: true,
            })
                .catch(() => {
                return (0, sample_composable_cli_1.auth)({ host: 'https://schismless-ehtel-overaggressively.ngrok-free.dev' });
            })
                .catch(() => {
                throw new Error('Failed to authenticate with Plasmic. Please run `npx sample-composable-cli auth` manually.');
            });
            yield promise;
        }
        // Calling `npx create-XXX` means we don't have to keep these dependencies up to date
        banner('CREATING THE PROJECT');
        if (!['nextjs', 'gatsby', 'react', 'tanstack'].includes(platform)) {
            throw new Error(`Unrecognized platform: ${platform}`);
        }
        if (!['codegen', 'loader'].includes(scheme)) {
            throw new Error(`Unrecognized Plasmic scheme: ${scheme}`);
        }
        const cpaStrategy = yield getCPAStrategy(platform);
        // Create project using strategy for platform
        yield cpaStrategy.create({
            projectPath: resolvedProjectPath,
            jsOrTs,
            template,
            platformOptions,
        });
        // Ensure that we have a empty tsconfig and @types packages.
        // Gatsby and Next.js by default support typescript handling internally
        // tsconfig so we don't have to ensure it.
        if (jsOrTs === 'ts' && platform === 'react') {
            yield (0, file_utils_1.ensureTsconfig)(resolvedProjectPath);
        }
        // Make sure we have an api token for loader
        if (scheme === 'loader' && !projectApiToken) {
            projectApiToken = yield (0, sample_composable_cli_1.getProjectApiToken)(projectId);
            if (!projectApiToken) {
                throw new Error(`Failed to get projectApiToken for ${projectId}`);
            }
        }
        // Install dependency
        banner('INSTALLING THE PLASMIC DEPENDENCY');
        const installResult = yield cpaStrategy.installDeps({
            scheme,
            projectPath: resolvedProjectPath,
            jsOrTs,
        });
        if (!installResult) {
            throw new Error('Failed to install the Plasmic dependency');
        }
        // Configure
        yield cpaStrategy.overwriteConfig({
            projectId,
            projectPath: resolvedProjectPath,
            projectApiToken,
            jsOrTs,
            scheme,
            platformOptions,
        });
        // Generate files
        yield cpaStrategy.generateFiles({
            projectPath: resolvedProjectPath,
            jsOrTs,
            scheme,
            projectId,
            projectApiToken,
            platformOptions,
        });
        /**
         * INSTRUCT USER ON NEXT STEPS
         */
        const pkgMgr = (0, npm_utils_1.detectPackageManager)(resolvedProjectPath);
        const npmRunCmd = pkgMgr === 'yarn' ? 'yarn' : pkgMgr === 'pnpm' ? 'pnpm run' : 'npm run';
        const command = platform === 'nextjs'
            ? `${npmRunCmd} dev`
            : platform === 'gatsby'
                ? `${npmRunCmd} develop`
                : platform === 'react'
                    ? `${npmRunCmd} dev`
                    : '';
        const relativeDir = path.relative(process.cwd(), resolvedProjectPath);
        // Overwrite README
        yield (0, file_utils_1.overwriteReadme)(resolvedProjectPath, platform, command);
        console.log('----------------------------------------');
        console.log(chalk_1.default.green.bold(`Congrats! We created the Plasmic-connected project at ${relativeDir}`));
        console.log();
        console.log();
        console.log();
        console.log('Change directories into your new project and start the development server:');
        console.log();
        console.log(chalk_1.default.bold(`cd ${relativeDir}`));
        console.log(chalk_1.default.bold(command));
        console.log();
        if (platform === 'nextjs' || platform === 'gatsby') {
            console.log('Navigate to the routes (e.g. /home) defined by your page components from Plasmic Studio.');
        }
        if (scheme === 'codegen') {
            console.log('To watch for changes in Plasmic components, in a separate terminal run:');
            console.log(chalk_1.default.bold('npx plasmic watch'));
        }
    });
}
function checkValidName(name) {
    // User need to specify a truthy value
    if (!name) {
        console.warn('Please specify the project directory');
        return false;
    }
    // Check that projectName is a valid npm package name
    const nameValidation = (0, validate_npm_package_name_1.default)(name);
    if (!nameValidation.validForNewPackages) {
        if (nameValidation.warnings) {
            nameValidation.warnings.forEach((e) => console.warn(e));
        }
        if (nameValidation.errors) {
            nameValidation.errors.forEach((e) => console.error(e));
        }
        console.warn(`'${name}' is not a valid name for an npm package. Please choose another name.`);
        return false;
    }
    return true;
}
const PROJECT_URL_REGEXP = /studio\.plasmic\.app\/projects\/([a-z0-9]{5,})(\/|$)/i;
const PROJECT_ID_REGEXP = /([a-z0-9]{5,})/i;
function checkProjectInput(input) {
    try {
        extractProjectId(input);
        return true;
    }
    catch (_a) {
        console.warn(`"${input}" is not a valid project URL nor ID.`);
        return false;
    }
}
/** Gets a project ID from an ID itself or a URL. */
function extractProjectId(input) {
    const matchUrl = input.match(PROJECT_URL_REGEXP);
    if (matchUrl) {
        return matchUrl[1];
    }
    const matchId = input.match(PROJECT_ID_REGEXP);
    if (matchId) {
        return matchId[1];
    }
    throw new Error('run checkProjectInput before extractProjectId');
}
function banner(message) {
    // 50-char width
    console.log();
    console.log('==================================================');
    console.log(chalk_1.default.bold(message));
    console.log('==================================================');
}
/**
 * Re-export this so that consumers (e.g. plasmic-action)
 * can use it too
 */
exports.setMetadata = sample_composable_cli_1.setMetadataEnv;
