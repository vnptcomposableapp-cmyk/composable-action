import { PlasmicConfig } from 'sample-composable-cli/dist/utils/config-utils';
import { JsOrTs, PlatformType } from './types';
/**
 * Runs the search pattern through `glob` and deletes all resulting files
 * @param searchPattern - glob search query
 * @param skipPatterns - array of fragments. Skip any file contains any of the fragments
 */
export declare function deleteGlob(searchPattern: string, skipPatterns?: string[]): void;
export declare function stripExtension(filename: string, removeComposedPath?: boolean): string;
export declare function writePlasmicLoaderJson(projectDir: string, projectId: string, projectApiToken: string): Promise<void>;
/**
 * Overwrite the README file
 * @param projectPath
 * @param platform
 * @param buildCommand
 */
export declare function overwriteReadme(projectPath: string, platform: PlatformType, buildCommand: string): Promise<void>;
/**
 * Generate a file to render the component
 * @param componentAbsPath - absolute path to component to render
 * @param indexAbsPath - absolute path of index file to write
 * @returns
 */
export declare function generateHomePage(componentAbsPath: string, indexAbsPath: string, globalContextsAbsPath?: string): string;
/**
 * Generate a Welcome page based on a PlasmicConfig
 * @param config - PlasmicConfig
 * @param noPages - don't render links to pages
 * @returns
 */
export declare function generateWelcomePage(config: PlasmicConfig, platform: string): string;
export declare function getPlasmicConfig(projectPath: string, platform: PlatformType, scheme: string): Promise<PlasmicConfig>;
export declare function ensureTsconfig(projectPath: string): Promise<void>;
export declare function ifTs(ts: JsOrTs, str: string): string;
