"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installCodegenDeps = installCodegenDeps;
exports.runCodegenSync = runCodegenSync;
const lib_1 = require("../lib");
const cmd_utils_1 = require("../utils/cmd-utils");
const npm_utils_1 = require("../utils/npm-utils");
function installCodegenDeps(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { projectPath } = opts;
        return yield (0, npm_utils_1.installUpgrade)('sample-composable-cli', { workingDir: projectPath });
    });
}
function runCodegenSync(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { projectId, projectApiToken, projectPath } = opts;
        (0, lib_1.banner)('SYNCING PLASMIC COMPONENTS');
        const project = projectApiToken
            ? `${projectId}:${projectApiToken}`
            : projectId;
        yield (0, cmd_utils_1.spawnOrFail)(`npx plasmic sync --yes -p ${project}`, projectPath);
    });
}
