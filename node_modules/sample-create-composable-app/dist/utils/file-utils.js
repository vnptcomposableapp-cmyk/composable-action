"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteGlob = deleteGlob;
exports.stripExtension = stripExtension;
exports.writePlasmicLoaderJson = writePlasmicLoaderJson;
exports.overwriteReadme = overwriteReadme;
exports.generateHomePage = generateHomePage;
exports.generateWelcomePage = generateWelcomePage;
exports.getPlasmicConfig = getPlasmicConfig;
exports.ensureTsconfig = ensureTsconfig;
exports.ifTs = ifTs;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const lodash_1 = __importDefault(require("lodash"));
const path = __importStar(require("upath"));
const readme_1 = require("../templates/readme");
const welcomePage_1 = require("../templates/welcomePage");
const lang_utils_1 = require("./lang-utils");
const npm_utils_1 = require("./npm-utils");
/**
 * Runs the search pattern through `glob` and deletes all resulting files
 * @param searchPattern - glob search query
 * @param skipPatterns - array of fragments. Skip any file contains any of the fragments
 */
function deleteGlob(searchPattern, skipPatterns) {
    const filesToDelete = glob_1.default
        .sync(searchPattern)
        .filter((file) => !skipPatterns || !skipPatterns.find((pattern) => file.includes(pattern)));
    filesToDelete.forEach((f) => (0, fs_1.unlinkSync)(f));
}
function stripExtension(filename, removeComposedPath = false) {
    const ext = removeComposedPath
        ? filename.substring(filename.indexOf('.'))
        : path.extname(filename);
    if (!ext || filename === ext) {
        return filename;
    }
    return filename.substring(0, filename.lastIndexOf(ext));
}
function writePlasmicLoaderJson(projectDir, projectId, projectApiToken) {
    return __awaiter(this, void 0, void 0, function* () {
        const plasmicLoaderJson = path.join(projectDir, 'plasmic-loader.json');
        const content = {
            projects: [
                {
                    projectId,
                    projectApiToken,
                },
            ],
        };
        yield fs_1.promises.writeFile(plasmicLoaderJson, JSON.stringify(content));
    });
}
/**
 * Overwrite the README file
 * @param projectPath
 * @param platform
 * @param buildCommand
 */
function overwriteReadme(projectPath, platform, buildCommand) {
    return __awaiter(this, void 0, void 0, function* () {
        const readmeFile = path.join(projectPath, 'README.md');
        const contents = (0, readme_1.README)(platform, buildCommand);
        yield fs_1.promises.writeFile(readmeFile, contents);
    });
}
/**
 * Generate a file to render the component
 * @param componentAbsPath - absolute path to component to render
 * @param indexAbsPath - absolute path of index file to write
 * @returns
 */
function generateHomePage(componentAbsPath, indexAbsPath, globalContextsAbsPath) {
    const componentFilename = path.basename(componentAbsPath);
    const componentName = stripExtension(componentFilename);
    // The relative import path from App.js to the Plasmic component
    const componentRelativePath = path.relative(path.dirname(indexAbsPath), componentAbsPath);
    const globalContextsImport = globalContextsAbsPath
        ? `import GlobalContextsProvider from './${stripExtension(path.relative(path.dirname(indexAbsPath), globalContextsAbsPath))}'`
        : '';
    const maybeWrapInGlobalContexts = (content) => {
        return globalContextsAbsPath
            ? `<GlobalContextsProvider>${content}</GlobalContextsProvider>`
            : content;
    };
    const appjsContents = `
import ${componentName} from './${stripExtension(componentRelativePath)}';
${globalContextsImport}

function App() {
  return (${maybeWrapInGlobalContexts(`<${componentName} />`)});
}

export default App;
  `;
    return appjsContents;
}
/**
 * Generate a Welcome page based on a PlasmicConfig
 * @param config - PlasmicConfig
 * @param noPages - don't render links to pages
 * @returns
 */
function generateWelcomePage(config, platform) {
    var _a, _b, _c, _d;
    let pages;
    if (platform !== 'react' && config && lodash_1.default.isArray(config.projects)) {
        const components = lodash_1.default.flatMap(config.projects, (p) => p.components).filter((c) => c.componentType === 'page');
        const dir = (_b = (_a = config === null || config === void 0 ? void 0 : config.nextjsConfig) === null || _a === void 0 ? void 0 : _a.pagesDir) !== null && _b !== void 0 ? _b : (_c = config === null || config === void 0 ? void 0 : config.gatsbyConfig) === null || _c === void 0 ? void 0 : _c.pagesDir;
        if (components.length > 0 && dir) {
            pages = {
                components,
                dir,
                getPageSection: () => {
                    const pageLinks = components
                        .map((pc) => {
                        // Get the relative path on the filesystem
                        const relativePath = path.relative(dir, pc.importSpec.modulePath);
                        // Format as an absolute path without the extension name
                        const relativeLink = '/' + stripExtension(relativePath);
                        if (platform === 'nextjs') {
                            return `<li><Link href="${relativeLink}">${pc.name} - ${relativeLink}</Link></li>`;
                        }
                        else {
                            return `<li><a style={{ color: "blue" }} href="${relativeLink}">${pc.name} - ${relativeLink}</a></li>`;
                        }
                    })
                        .join('\n');
                    return `
          <h3>Your pages:</h3>
          <ul>
            ${pageLinks}
          </ul>
    `;
                },
            };
        }
    }
    const content = (0, welcomePage_1.WELCOME_PAGE)(!!pages, platform, (_d = pages === null || pages === void 0 ? void 0 : pages.getPageSection()) !== null && _d !== void 0 ? _d : '');
    return content;
}
function getPlasmicConfig(projectPath, platform, scheme) {
    return __awaiter(this, void 0, void 0, function* () {
        const isNextjs = platform === 'nextjs';
        const isGatsby = platform === 'gatsby';
        const isLoader = scheme === 'loader';
        const isCodegen = scheme === 'codegen';
        const configPath = (0, lang_utils_1.ensure)(isCodegen
            ? 'plasmic.json'
            : isNextjs && isLoader
                ? '.plasmic/plasmic.json'
                : isGatsby && isLoader
                    ? '.cache/.plasmic/plasmic.json'
                    : undefined);
        const configStr = yield fs_1.promises.readFile(path.join(projectPath, configPath));
        return JSON.parse(configStr.toString());
    });
}
// Create tsconfig.json if it doesn't exist
// this will force Plasmic to recognize Typescript
function ensureTsconfig(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsconfigPath = path.join(projectPath, 'tsconfig.json');
        if (!(0, fs_1.existsSync)(tsconfigPath)) {
            yield fs_1.promises.writeFile(tsconfigPath, '');
            const installTsResult = yield (0, npm_utils_1.installUpgrade)('typescript @types/react', {
                workingDir: projectPath,
            });
            if (!installTsResult) {
                throw new Error('Failed to install Typescript');
            }
        }
    });
}
function ifTs(ts, str) {
    return ts === 'ts' ? str : '';
}
