"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateNotify = updateNotify;
exports.checkEngineStrict = checkEngineStrict;
exports.spawn = spawn;
exports.installUpgrade = installUpgrade;
exports.detectPackageManager = detectPackageManager;
/*eslint
@typescript-eslint/no-var-requires: 0,
*/
const execa = __importStar(require("execa"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const semver = __importStar(require("semver"));
const update_notifier_1 = __importDefault(require("update-notifier"));
/**
 * Call this to check if there's an update available
 * and display to the user
 * @returns version
 */
function updateNotify() {
    const pkg = require('../../package.json');
    const notifier = (0, update_notifier_1.default)({
        pkg,
        updateCheckInterval: 1000 * 60 * 60, // Check once an hour
    });
    notifier.notify();
    return pkg.version;
}
/**
 * Call this to check if we match the engine policy
 */
function checkEngineStrict() {
    var _a;
    const pkg = require('../../package.json');
    const minNodeVersion = (_a = pkg === null || pkg === void 0 ? void 0 : pkg.engines) === null || _a === void 0 ? void 0 : _a.node;
    if (!!minNodeVersion && !semver.satisfies(process.version, minNodeVersion)) {
        console.error(`create-plasmic-app only works on Node ${minNodeVersion}`);
        return false;
    }
    return true;
}
/**
 * Run a command on the shell synchronously
 * @param cmd
 * @param workingDir
 * @returns boolean - true if success, false if fail
 */
function spawn(cmd, workingDir) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(cmd);
        const cp = yield execa.command(cmd, {
            shell: true,
            stdio: 'inherit',
            cwd: workingDir,
        });
        return cp.exitCode === 0;
    });
}
/**
 * Install a package using either `npm` or `yarn`
 * @param pkg - package name
 * @param opts
 * @returns
 */
function installUpgrade(pkg_1) {
    return __awaiter(this, arguments, void 0, function* (pkg, opts = {}) {
        const cmd = installCommand(pkg, opts);
        const r = yield spawn(cmd, opts.workingDir);
        if (r) {
            console.log(`Successfully added ${pkg} dependency.`);
            return true;
        }
        else {
            console.warn(`Cannot add ${pkg} to your project dependencies. Please add it manually.`);
            return false;
        }
    });
}
/**
 * Generate the installation command string for an npm package
 * @param pkg
 * @param opts
 * @returns
 */
function installCommand(pkg, opts = {}) {
    const mgr = detectPackageManager(opts.workingDir);
    if (mgr === 'yarn') {
        if (opts.global) {
            return `yarn global add ${pkg}`;
        }
        else if (opts.dev) {
            return `yarn add --dev --ignore-scripts -W ${pkg}`;
        }
        else {
            return `yarn add --ignore-scripts -W ${pkg}`;
        }
    }
    else if (mgr === 'pnpm') {
        if (opts.global) {
            return `pnpm install -g ${pkg}`;
        }
        else if (opts.dev) {
            return `pnpm install --dev --ignore-scripts ${pkg}`;
        }
        else {
            return `pnpm install --ignore-scripts ${pkg}`;
        }
    }
    else {
        if (opts.global) {
            return `npm install -g ${pkg}`;
        }
        else if (opts.dev) {
            return `npm install --save-dev --ignore-scripts ${pkg}`;
        }
        else {
            return `npm install --ignore-scripts ${pkg}`;
        }
    }
}
/**
 * Detect if you should use `npm` or `yarn`
 * @param dir
 * @returns
 */
function detectPackageManager(dir) {
    // We should look only inside the directory instead of looking to the ancestors
    // with findupSync, the reason for this is that the current gatsby template
    // uses npm, so if the user has some yarn.lock in a parent directory it's
    // going to run yarn commands, this is going to trigger an error with sharp
    const yarnLock = (0, fs_1.existsSync)(path_1.default.join(dir ? dir : '', 'yarn.lock'));
    const pnpmLock = (0, fs_1.existsSync)(path_1.default.join(dir ? dir : '', 'pnpm-lock.yaml'));
    if (yarnLock) {
        return 'yarn';
    }
    else if (pnpmLock) {
        return 'pnpm';
    }
    else {
        return 'npm';
    }
}
