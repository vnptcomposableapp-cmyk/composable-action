#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sample_composable_cli_1 = require("sample-composable-cli");
const Sentry = __importStar(require("@sentry/node"));
const fs = __importStar(require("fs"));
const inquirer_1 = __importDefault(require("inquirer"));
const path = __importStar(require("upath"));
const yargs_1 = __importDefault(require("yargs"));
const cpa = __importStar(require("./lib"));
const lang_utils_1 = require("./utils/lang-utils");
const npm_utils_1 = require("./utils/npm-utils");
if (process.env.CPA_DEBUG_CHDIR) {
    process.chdir(process.env.CPA_DEBUG_CHDIR);
}
// Check for updates
const createPlasmicAppVersion = (0, npm_utils_1.updateNotify)();
// Specify command-line args
const argv = yargs_1.default
    .command('$0 [projectName]', 'Create a Plasmic app with Next.js, Gatsby, or React (Vite)', (yargs2) => {
    yargs2
        .usage('Usage: $0 [projectName] [options]')
        .positional('projectName', {
        describe: 'Project and NPM package name',
        string: true,
    });
})
    .option('platform', {
    describe: 'Target platform',
    choices: ['', 'nextjs', 'gatsby', 'react', 'tanstack'],
})
    .option('scheme', {
    describe: 'Plasmic integration scheme',
    choices: ['', 'codegen', 'loader'],
})
    .option('projectId', {
    describe: 'Plasmic project ID',
    string: true,
})
    .option('projectApiToken', {
    describe: 'Plasmic project API token (optional, to bypass standard auth)',
    string: true,
})
    .option('template', {
    describe: 'Specify a template for the created project',
    string: true,
})
    .option('typescript', {
    describe: 'Use Typescript?',
    boolean: true,
})
    .option('appDir', {
    describe: '(Next.js) Use app directory (experimental)?',
    boolean: true,
})
    .strict()
    .help('h')
    .alias('h', 'help')
    .check((argv2) => {
    if (argv2.scheme === 'loader' &&
        !(argv2.platform === 'nextjs' || argv2.platform === 'gatsby')) {
        throw new Error('Loader scheme may only be used with Next.js or Gatsby');
    }
    if (argv2.appDir &&
        !(argv2.platform === 'nextjs' && argv2.scheme === 'loader')) {
        throw new Error('App dir may only be used with Next.js and loader scheme');
    }
    return true;
}).argv;
// Initialize Sentry
Sentry.init({
    dsn: 'https://0d602108de7f44aa9470a41cc069395f@o328029.ingest.sentry.io/5679926',
});
Sentry.configureScope((scope) => {
    //scope.setUser({ email: auth.user });
    scope.setExtra('cliVersion', createPlasmicAppVersion);
    scope.setExtra('args', JSON.stringify(argv));
});
/**
 * Prompt the user for any answers that we're missing from the command-line args
 * @param question instance of a question formatted for `inquirer`
 * @returns
 */
function maybePrompt(question) {
    return __awaiter(this, void 0, void 0, function* () {
        const name = (0, lang_utils_1.ensure)(question.name);
        const message = (0, lang_utils_1.ensure)(question.message);
        const cliAnswer = argv[name];
        if (cliAnswer !== null &&
            cliAnswer !== undefined &&
            cliAnswer !== '' &&
            (!question.validate || question.validate(cliAnswer))) {
            console.log(`${message}: ${cliAnswer} (specified in CLI arg)`);
            return cliAnswer; // assume it's the correct type
        }
        const ans = yield inquirer_1.default.prompt(question);
        return ans[name];
    });
}
// Keeping these as globals to easily share with our `crash` function
let resolvedProjectPath;
/**
 * Main function
 */
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * PROMPT USER
         */
        // User-specified project name
        const projectName = yield maybePrompt({
            name: 'projectName',
            message: 'What is your project named?',
            default: 'my-app',
            validate: cpa.checkValidName,
        });
        // Absolute path to the new project
        resolvedProjectPath = path.resolve(projectName);
        // Prompt for the platform
        const platform = yield maybePrompt({
            name: 'platform',
            message: 'What React framework do you want to use?',
            type: 'list',
            choices: () => [
                {
                    name: 'Next.js (recommended)',
                    short: 'Next.js',
                    value: 'nextjs',
                },
                {
                    name: 'Gatsby',
                    value: 'gatsby',
                },
                {
                    name: 'TanStack Start',
                    short: 'TanStack Start',
                    value: 'tanstack',
                },
                {
                    name: 'React (Vite)',
                    short: 'React (Vite)',
                    value: 'react',
                },
            ],
            default: 'nextjs',
        });
        // Prompt for Typescript
        const jsOrTs = platform === 'tanstack'
            ? 'ts'
            : (yield maybePrompt({
                name: 'typescript',
                message: 'What language do you want to use?',
                type: 'list',
                choices: () => [
                    {
                        name: 'TypeScript',
                        value: true,
                    },
                    {
                        name: 'JavaScript',
                        value: false,
                    },
                ],
                default: true,
            }))
                ? 'ts'
                : 'js';
        // Scheme to use for Plasmic integration
        // - loader only available for gatsby/next.js
        const scheme = platform === 'nextjs' || platform === 'gatsby'
            ? yield maybePrompt({
                name: 'scheme',
                message: 'Which scheme do you want to use to integrate Plasmic?',
                type: 'list',
                choices: () => [
                    {
                        name: 'PlasmicLoader (recommended default for most websites)',
                        short: 'PlasmicLoader',
                        value: 'loader',
                    },
                    {
                        name: 'Codegen (advanced feature for building complex stateful apps)',
                        short: 'Codegen',
                        value: 'codegen',
                    },
                ],
                default: 'loader',
            })
            : 'codegen';
        // TODO: Support nextjs + codegen
        const platformOptions = {};
        // Don't show app dir question until we have better support for app dir.
        const showAppDirQuestion = false;
        if (showAppDirQuestion && platform === 'nextjs' && scheme === 'loader') {
            platformOptions.nextjs = {
                appDir: yield maybePrompt({
                    name: 'appDir',
                    message: 'Do you want to use the app/ directory and React Server Components? (see https://beta.nextjs.org/docs/app-directory-roadmap)',
                    type: 'list',
                    choices: () => [
                        {
                            name: 'No, use pages/ directory',
                            short: 'No',
                            value: false,
                        },
                        {
                            name: 'Yes, use app/ directory (experimental)',
                            short: 'Yes',
                            value: true,
                        },
                    ],
                    default: false,
                }),
            };
        }
        // Get the projectId
        console.log();
        const projectInput = yield maybePrompt({
            name: 'projectId',
            message: `If you don't have a project yet, create one by going to https://studio.plasmic.app/starters/blank
What is the URL of your project?`,
            validate: cpa.checkProjectInput,
        });
        const projectId = cpa.extractProjectId(projectInput);
        // RUN IT
        console.log();
        const template = argv['template'];
        const projectApiToken = argv['projectApiToken'];
        sample_composable_cli_1.logger.info(`[create-composable-app] argv: ${JSON.stringify(argv)}`);
        // Set the metadata environment variable to tag the future Segment codegen event
        (0, sample_composable_cli_1.setMetadataEnv)({
            source: 'create-plasmic-app',
        });
        yield cpa.create({
            resolvedProjectPath,
            projectId,
            platform,
            platformOptions,
            scheme,
            jsOrTs,
            projectApiToken,
            template,
        });
    });
}
run().catch((err) => {
    console.log();
    console.log('Aborting installation.');
    cpa.banner('create-plasmic-app failed!');
    console.error('Unexpected error: ');
    console.error(err);
    console.log();
    // Instruct user to remove artifacts
    if (resolvedProjectPath && fs.existsSync(resolvedProjectPath)) {
        console.log(`Please remove ${resolvedProjectPath} and try again.`);
    }
    // Check if we satisfy the engine policy
    const satisfiesVersion = (0, npm_utils_1.checkEngineStrict)();
    // Log to Sentry only if user has correct Node version
    if (satisfiesVersion && err) {
        Sentry.captureException(err);
    }
    process.exit(1);
});
