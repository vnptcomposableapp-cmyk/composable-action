import { CommonArgs } from "..";
export interface InitArgs extends CommonArgs {
    host: string;
    platform: "" | "react" | "nextjs" | "gatsby" | "tanstack";
    codeLang: "" | "ts" | "js";
    codeScheme: "" | "blackbox";
    styleScheme: "" | "css" | "css-modules";
    imagesScheme: "" | "inlined" | "files" | "public-files";
    imagesPublicDir: string;
    imagesPublicUrlPrefix: string;
    srcDir: string;
    plasmicDir: string;
    pagesDir?: string;
    enableSkipAuth?: boolean;
    reactRuntime?: "classic" | "automatic";
}
export declare function initPlasmic(opts: InitArgs & {
    enableSkipAuth?: boolean;
}): Promise<void>;
/**
 * Get the short description, which exists for all args
 * @param key
 * @returns
 */
export declare function getInitArgsShortDescription(key: keyof Omit<InitArgs, "baseDir">): string | undefined;
/**
 * Try to get a long description, falling back to the short description
 * @param key
 * @returns
 */
export declare function getInitArgsLongDescription(key: keyof Omit<InitArgs, "baseDir">): string | undefined;
/**
 * Try to get a question form, falling back to the description
 * @param key
 * @returns
 */
export declare function getInitArgsQuestion(key: keyof Omit<InitArgs, "baseDir">): string | undefined;
/**
 * Get the possible choices for an arg
 * @param key
 * @returns
 */
export declare function getInitArgsChoices(key: keyof Omit<InitArgs, "baseDir">): string[] | undefined;
/**
 * Get a `opt` object for use with the `yargs` library.
 * If no choices are specified, assume it's freeform string input
 * All options use "" as the default, unless overridden
 * @param key
 * @param defaultOverride
 * @returns
 */
export declare function getYargsOption(key: keyof Omit<InitArgs, "baseDir">, defaultOverride?: string): {
    describe: string;
    string: boolean;
    default: string;
    choices?: undefined;
} | {
    describe: string;
    choices: string[];
    default: string;
    string?: undefined;
};
